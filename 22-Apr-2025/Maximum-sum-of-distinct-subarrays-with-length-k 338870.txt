# Problem: Maximum-sum-of-distinct-subarrays-with-length-k - https://leetcode.com/problems/maximum-sum-of-distinct-subarrays-with-length-k/

class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {
        int n = nums.size();
        unordered_map<int, int> freq;
        long maxSum = 0, currentSum = 0;
        int left = 0;

        for (int right = 0; right < n; ++right) {
            currentSum += nums[right];
            freq[nums[right]]++;

            while (freq[nums[right]] > 1) {
                freq[nums[left]]--;
                currentSum -= nums[left];
                left++;
            }

            if (right - left + 1 == k) {
                maxSum = max(maxSum, currentSum);
                freq[nums[left]]--;
                currentSum -= nums[left];
                left++;
            }
        }

        return maxSum;
    }
};
