# Problem: All Ancestors of a Node in a Directed Acyclic Graph  - https://leetcode.com/problems/all-ancestors-of-a-node-in-a-directed-acyclic-graph/description/

#include <ranges>
class Solution {
public:
    vector<vector<int>> getAncestors(int n, vector<vector<int>>& edges) {
        unordered_map<int, vector<int>> graph;
        vector<int> indegree(n, 0);
        vector<bitset<1001>> ancestors(n);
        vector<vector<int>> ans(n);
        for(auto& edge: edges){
            int u = edge[0], v = edge[1];
            graph[u].push_back(v);
            indegree[v]++;
        }

        queue<int> q;

        for (auto [i, val]: std::views::enumerate(indegree)) if(val == 0) q.push(i);

        while(!q.empty()){
            int u = q.front();
            q.pop();
            for(auto v: graph[u]){
                indegree[v]--;
                if(indegree[v] == 0) q.push(v);
                ancestors[v][u] = 1;
                ancestors[v] |= ancestors[u];
            }
        }

        for(size_t i = 0; i < n; i++)
            for(size_t j = 0; j < n; j++)
                if(ancestors[i][j] == 1)
                    ans[i].push_back(j);

        return ans;
    }
};